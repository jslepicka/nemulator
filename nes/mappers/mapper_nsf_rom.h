#pragma once
#include "mapper_nsf.h"
/*
    .bank 0
    .org $54F0
    .rsset $54F0
LOAD_VECTOR     .rs 2   ;54f0
INIT_VECTOR     .rs 2   ;54f2
PLAY_VECTOR     .rs 2   ;54f4
CONTROL         .rs 1   ;54f5
SONG            .rs 1   ;54f6
NUM_SONGS       .rs 1   ;54f7
PREV_INPUT      .rs 1   ;54f8
CUR_INPUT       .rs 1   ;54f9
NMI_FLAG        .rs 1   ;54fa

    .org $5300
RESET:
    sei
    cld
    ldx #$FF
    txs

    lda #0
    sta NMI_FLAG

    bit $2002
vwait1:
    bit $2002
    bpl vwait1
vwait2:
    bit $2002
    bpl vwait2

    ;setup PPU
    lda #%00000000
    sta $2000
    ;disable rendering
    lda #%00000000
    sta $2001

    ;load patterns
    ldx #0
    stx $2006
    stx $2006
PAT_LOOP:
    lda PATTERNS,x
    sta $2007
    inx
    cpx #80
    bne PAT_LOOP

    ;palette
    lda #$3F
    sta $2006
    lda #$0
    sta $2006
    lda #$31 ;background
    sta $2007
    lda #$02 ;note color
    sta $2007

    ;clear name and attribute tables
    lda #$20
    sta $2006
    lda #$00
    sta $2006

    lda #0
    ldy #4
OUTER:
    ldx #0
INNER:
    sta $2007
    inx
    bne INNER
    dey
    bne OUTER

    ;place note
    lda #$20
    sta $2006
    lda #$CF
    sta $2006
    ldx #1
    stx $2007
    inx
    stx $2007
    inx
    lda #$20
    sta $2006
    lda #$EF
    sta $2006
    stx $2007
    inx
    stx $2007

    lda #$00
    sta $2006
    sta $2006

    lda #%00001110
    sta $2001


WAIT_FOR_NMI:
    lda #0
    sta NMI_FLAG
    ;enable NMI
    jsr ENABLE_NMI
WAIT_FOR_NMI_LOOP:
    lda NMI_FLAG
    beq WAIT_FOR_NMI_LOOP

    jsr READ_CONTROLLER
    tax                 ;copy input to x
    sta CUR_INPUT       ;save current input
    eor PREV_INPUT      ;xor current input with previous to find changed inputs
    and CUR_INPUT       ;and input with xor result to get only changed inputs
    stx PREV_INPUT      ;store current input as previous input


    pha
    ;if right was pressed, change to next song
    and #$01
    beq END_RIGHT
    ;mute
    lda #$00
    sta $4015

    ldx SONG
    inx
    cpx NUM_SONGS
    bne INC_SONG
    LDA #0
    STA SONG
    ldy #1
    sty CONTROL
    jmp END_RIGHT
INC_SONG:
    inc SONG
    ldy #1
    sty CONTROL
END_RIGHT:
    pla

    pha
    and #$02
    beq END_LEFT
    ;mute
    lda #$00
    sta $4015
    ldx SONG
    bne DEC_SONG
    ldy NUM_SONGS
    dey
    sty SONG
    ldy #1
    sty CONTROL
    jmp END_LEFT
DEC_SONG:
    dec SONG
    ldy #1
    sty CONTROL
END_LEFT:
    pla


    ldx CONTROL
    beq WAIT_FOR_NMI ;if control is 0, do nothing
    dex
    beq INIT_SONG ; 1  = init song
    dex
    beq PLAY ; 2 = playing

INIT_SONG:
    ; disable nmi
    lda #0
    sta $2000
    ; clear ram @ 0000-07FF and 6000-7FFF
    lda #0
    tax
MEM_CLEAR_LOOP:
    sta $00,X
    sta $100,X
    sta $200,X
    sta $300,X
    sta $400,X
    sta $500,X
    sta $600,X
    sta $700,X
    inx
    bne MEM_CLEAR_LOOP
    ; init sound registers; 0 -> 4000-4013, 0 -> 4015, then F -> 4015
    ; frame counter 40 -> 4017
    ; load bank values
    ; A = song
    ; X = NTSC/PAL
    ; call init routine

    ; init sound registers
    LDX #$14
SNDCLEAR_LOOP:
    dex
    sta $4000,X
    bne SNDCLEAR_LOOP

    ;set frame counter to 40
    lda #$40
    sta $4017

    ;set volume to max
    lda #$0F
    sta $4015

    lda SONG
    ldx #0 ;hardcoded to NTSC
    jsr INIT_ROUTINE
POST_INIT:
    lda #2
    sta CONTROL
    jmp WAIT_FOR_NMI

INIT_ROUTINE:
    jmp [INIT_VECTOR]

PLAY:
    jsr PLAY_ROUTINE
    jmp WAIT_FOR_NMI

PLAY_ROUTINE:
    jmp [PLAY_VECTOR]


READ_CONTROLLER:
    ;read controller
    lda #$01
    sta $4016
    lda #$00
    sta $4016
    ldx #8
READ_LOOP:
    pha
    lda $4016       ;read joypad port
    lsr A           ;bit 0 -> carry
    pla
    rol A           ;carry -> bit 0
    dex
    bne READ_LOOP
    rts

ENABLE_NMI:
    lda $2000
    ora #$80
    sta $2000
    rts
DISABLE_NMI:
    lda $2000
    and #$7F
    sta $2000
    rts

PATTERNS:
    .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    .db $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00
    .db $C0, $E0, $B0, $98, $8C, $8C, $8C, $8C, $00, $00, $00, $00, $00, $00, $00, $00
    .db $01, $01, $1D, $3F, $7F, $7F, $3E, $1C, $00, $00, $00, $00, $00, $00, $00, $00
    .db $98, $90, $80, $80, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00


    .org $54E0
NMI:
    pha
    ;ack nmi
    lda $2002
    jsr DISABLE_NMI
    lda #1
    sta NMI_FLAG
    pla
    rti
*/

namespace nes {

unsigned char c_mapper_nsf::PLAYER_ROM[] = {
    0x78, 0xD8, 0xA2, 0xFF, 0x9A, 0xA9, 0x00, 0x8D, 0xFB, 0x54, 0x2C, 0x02, 0x20, 0x2C, 0x02, 0x20,
    0x10, 0xFB, 0x2C, 0x02, 0x20, 0x10, 0xFB, 0xA9, 0x00, 0x8D, 0x00, 0x20, 0xA9, 0x00, 0x8D, 0x01,
    0x20, 0xA2, 0x00, 0x8E, 0x06, 0x20, 0x8E, 0x06, 0x20, 0xBD, 0x85, 0x54, 0x8D, 0x07, 0x20, 0xE8,
    0xE0, 0x50, 0xD0, 0xF5, 0xA9, 0x3F, 0x8D, 0x06, 0x20, 0xA9, 0x00, 0x8D, 0x06, 0x20, 0xA9, 0x31,
    0x8D, 0x07, 0x20, 0xA9, 0x02, 0x8D, 0x07, 0x20, 0xA9, 0x20, 0x8D, 0x06, 0x20, 0xA9, 0x00, 0x8D,
    0x06, 0x20, 0xA9, 0x00, 0xA0, 0x04, 0xA2, 0x00, 0x8D, 0x07, 0x20, 0xE8, 0xD0, 0xFA, 0x88, 0xD0,
    0xF5, 0xA9, 0x20, 0x8D, 0x06, 0x20, 0xA9, 0xCF, 0x8D, 0x06, 0x20, 0xA2, 0x01, 0x8E, 0x07, 0x20,
    0xE8, 0x8E, 0x07, 0x20, 0xE8, 0xA9, 0x20, 0x8D, 0x06, 0x20, 0xA9, 0xEF, 0x8D, 0x06, 0x20, 0x8E,
    0x07, 0x20, 0xE8, 0x8E, 0x07, 0x20, 0xA9, 0x00, 0x8D, 0x06, 0x20, 0x8D, 0x06, 0x20, 0xA9, 0x0E,
    0x8D, 0x01, 0x20, 0xA9, 0x00, 0x8D, 0xFB, 0x54, 0x20, 0x73, 0x54, 0xAD, 0xFB, 0x54, 0xF0, 0xFB,
    0x20, 0x5C, 0x54, 0xAA, 0x8D, 0xFA, 0x54, 0x4D, 0xF9, 0x54, 0x2D, 0xFA, 0x54, 0x8E, 0xF9, 0x54,
    0x48, 0x29, 0x01, 0xF0, 0x23, 0xA9, 0x00, 0x8D, 0x15, 0x40, 0xAE, 0xF7, 0x54, 0xE8, 0xEC, 0xF8,
    0x54, 0xD0, 0x0D, 0xA9, 0x00, 0x8D, 0xF7, 0x54, 0xA0, 0x01, 0x8C, 0xF6, 0x54, 0x4C, 0xD8, 0x53,
    0xEE, 0xF7, 0x54, 0xA0, 0x01, 0x8C, 0xF6, 0x54, 0x68, 0x48, 0x29, 0x02, 0xF0, 0x21, 0xA9, 0x00,
    0x8D, 0x15, 0x40, 0xAE, 0xF7, 0x54, 0xD0, 0x0F, 0xAC, 0xF8, 0x54, 0x88, 0x8C, 0xF7, 0x54, 0xA0,
    0x01, 0x8C, 0xF6, 0x54, 0x4C, 0xFF, 0x53, 0xCE, 0xF7, 0x54, 0xA0, 0x01, 0x8C, 0xF6, 0x54, 0x68,
    0xAE, 0xF6, 0x54, 0xF0, 0x8E, 0xCA, 0xF0, 0x03, 0xCA, 0xF0, 0x48, 0xA9, 0x00, 0x8D, 0x00, 0x20,
    0xA9, 0x00, 0xAA, 0x9D, 0x00, 0x00, 0x9D, 0x00, 0x01, 0x9D, 0x00, 0x02, 0x9D, 0x00, 0x03, 0x9D,
    0x00, 0x04, 0x9D, 0x00, 0x05, 0x9D, 0x00, 0x06, 0x9D, 0x00, 0x07, 0xE8, 0xD0, 0xE5, 0xA2, 0x14,
    0xCA, 0x9D, 0x00, 0x40, 0xD0, 0xFA, 0xA9, 0x40, 0x8D, 0x17, 0x40, 0xA9, 0x0F, 0x8D, 0x15, 0x40,
    0xAD, 0xF7, 0x54, 0xA2, 0x00, 0x20, 0x50, 0x54, 0xA9, 0x02, 0x8D, 0xF6, 0x54, 0x4C, 0x93, 0x53,
    0x6C, 0xF2, 0x54, 0x20, 0x59, 0x54, 0x4C, 0x93, 0x53, 0x6C, 0xF4, 0x54, 0xA9, 0x01, 0x8D, 0x16,
    0x40, 0xA9, 0x00, 0x8D, 0x16, 0x40, 0xA2, 0x08, 0x48, 0xAD, 0x16, 0x40, 0x4A, 0x68, 0x2A, 0xCA,
    0xD0, 0xF6, 0x60, 0xAD, 0x00, 0x20, 0x09, 0x80, 0x8D, 0x00, 0x20, 0x60, 0xAD, 0x00, 0x20, 0x29,
    0x7F, 0x8D, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xB0, 0x98, 0x8C, 0x8C, 0x8C, 0x8C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x1D, 0x3F, 0x7F, 0x7F, 0x3E, 0x1C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x90, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x48, 0xAD, 0x02, 0x20, 0x20, 0x7C, 0x54, 0xA9, 0x01, 0x8D, 0xFB, 0x54, 0x68, 0x40, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

} //namespace nes
